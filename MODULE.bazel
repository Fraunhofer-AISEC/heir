module(name = "heir")

bazel_dep(name = "bazel_skylib", version = "1.7.1")

# Gazelle puglin for BUILD file autogeneration
bazel_dep(name = "gazelle", version = "0.42.0")

bazel_dep(name = "bazel_skylib_gazelle_plugin", version = "1.7.1", dev_dependency = True)

# provides the `license` rule, which is required because llvm's gentbl_rule
# implicitly depends upon the target '//:license'. How bizarre.
bazel_dep(name = "rules_license", version = "1.0.0")

# rules_foreign_cc provides access to a `make` bazel rule, which is needed
# to build yosys
bazel_dep(name = "rules_foreign_cc", version = "0.14.0")
bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "rules_go", version = "0.53.0")
bazel_dep(name = "rules_python", version = "1.1.0")
bazel_dep(name = "googletest", version = "1.16.0")
bazel_dep(name = "google_benchmark", version = "1.9.1")
bazel_dep(name = "abseil-cpp", version = "20250127.0", repo_name = "com_google_absl")
bazel_dep(name = "eigen", version = "4.0.0-20241125.bcr.1")

# needed as transitive deps of yosys
bazel_dep(name = "rules_flex", version = "0.3")
bazel_dep(name = "rules_bison", version = "0.3")

# https://github.com/or-tools/bazel_or-tools/issues/2
# bazel_dep(name = "ortools", version = "9.12", repo_name = "com_google_ortools")
# needed as transitive deps of or-tools until or tools is in the bazel registry
bazel_dep(name = "protobuf", version = "29.3", repo_name = "com_google_protobuf")
bazel_dep(name = "rules_proto", version = "7.1.0")
bazel_dep(name = "rules_java", version = "8.9.0")
bazel_dep(name = "zlib", version = "1.3.1.bcr.5")

# Hermetic python setup
python = use_extension("@rules_python//python/extensions:python.bzl", "python")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

python.toolchain(python_version = "3.11")

pip.parse(
    hub_name = "heir_pip_deps",
    python_version = "3.11",
    requirements_lock = "//:requirements.txt",
)
pip.parse(
    hub_name = "frontend_pip_deps",
    python_version = "3.11",
    requirements_lock = "//frontend:requirements.txt",
)

use_repo(python, python_3_11 = "python_3_11")

use_repo(pip, "heir_pip_deps")
use_repo(pip, "frontend_pip_deps")

# Go setup
go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")

# All *direct* Go dependencies of the module have to be listed explicitly.
use_repo(
    go_deps,
    "com_github_tuneinsight_lattigo_v6",
)

# compile_commands extracts the relevant compile data from bazel into
# `compile_commands.json` so that clangd, clang-tidy, etc., can use it.
# Whenever a build file changes, you must re-run
#
#   bazel run @hedron_compile_commands//:refresh_all
#
# to ingest new data into these tools.
#
# See the project repo for more details and configuration options
# https://github.com/hedronvision/bazel-compile-commands-extractor
#
# For the override pointing to a different repo, see
# https://github.com/hedronvision/bazel-compile-commands-extractor/pull/219
bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    commit = "f5fbd4cee671d8d908f37c83abaf70fba5928fc7",
    remote = "https://github.com/mikael-s-persson/bazel-compile-commands-extractor",
)

# Workaround 2025-03-18: re2 has not created a new version yet. This solves an
# issue with `bazel mod deps`. Cf. https://github.com/google/re2/issues/525
git_override(
    module_name = "re2",
    commit = "c84a140c93352cdabbfb547c531be34515b12228",
    remote = "https://github.com/google/re2",
)
